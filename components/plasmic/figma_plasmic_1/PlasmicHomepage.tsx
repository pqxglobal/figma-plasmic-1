// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ntiR5HszoWgbSbmF3r6BhJ
// Component: K-aHoUGKKLhb
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_figma_plasmic_1.module.css"; // plasmic-import: ntiR5HszoWgbSbmF3r6BhJ/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: K-aHoUGKKLhb/css

import TwitterIcon from "./icons/PlasmicIcon__Twitter"; // plasmic-import: ivfnbH6Bu/icon
import GithubIcon from "./icons/PlasmicIcon__Github"; // plasmic-import: gWguGUpuK/icon
import YoutubeIcon from "./icons/PlasmicIcon__Youtube"; // plasmic-import: 8BzFdH2j9/icon
import Vector2Icon from "./icons/PlasmicIcon__Vector2"; // plasmic-import: SPAj1B1xPa/icon

export type PlasmicHomepage__VariantMembers = {};

export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {
  followPqxGlobal?: React.ReactNode;
};

type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>(
  "followPqxGlobal"
);

export type PlasmicHomepage__OverridesType = {
  masterFrame?: p.Flex<"div">;
  homepage?: p.Flex<"div">;
  frame4?: p.Flex<"div">;
  pqxGlobal?: p.Flex<"div">;
  frame5?: p.Flex<"div">;
  rectangle2?: p.Flex<"div">;
  rectangle3?: p.Flex<"div">;
  loremIpsumDolorSitAmetConsecteturAdipiscingElitAtTinciduntAdipiscingArcuVenenatisMassaEtiamMaurisSemAcInTempusPharetra?: p.Flex<"div">;
  button?: p.Flex<"div">;
  group1?: p.Flex<"div">;
  rectangle5?: p.Flex<"div">;
  frame9?: p.Flex<"div">;
  frame6?: p.Flex<"div">;
  rectangle6?: p.Flex<"div">;
  frame7?: p.Flex<"div">;
  rectangle7?: p.Flex<"div">;
  frame8?: p.Flex<"div">;
  rectangle8?: p.Flex<"div">;
  group2?: p.Flex<"div">;
  frame23?: p.Flex<"div">;
  rectangle9?: p.Flex<"div">;
  frame21?: p.Flex<"div">;
  rectangle14?: p.Flex<"div">;
  frame20?: p.Flex<"div">;
  rectangle10?: p.Flex<"div">;
  frame13?: p.Flex<"div">;
  frame17?: p.Flex<"div">;
  frame18?: p.Flex<"div">;
  frame19?: p.Flex<"div">;
  button3?: p.Flex<"div">;
  rectangle12?: p.Flex<"div">;
  frame22?: p.Flex<"div">;
  rectangle13?: p.Flex<"div">;
  frame14?: p.Flex<"div">;
  rectangle15?: p.Flex<"div">;
  frame2?: p.Flex<"div">;
  frame15?: p.Flex<"div">;
  frame3?: p.Flex<"div">;
  rectangle4?: p.Flex<"div">;
  rectangle17?: p.Flex<"div">;
  rectangle18?: p.Flex<"div">;
  rectangle19?: p.Flex<"div">;
  rectangle20?: p.Flex<"div">;
  frame11?: p.Flex<"div">;
};

export interface DefaultHomepageProps {}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"masterFrame"}
          data-plasmic-override={overrides.masterFrame}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.masterFrame
          )}
        >
          <div
            data-plasmic-name={"homepage"}
            data-plasmic-override={overrides.homepage}
            className={classNames(projectcss.all, sty.homepage)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"frame4"}
              data-plasmic-override={overrides.frame4}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame4)}
            >
              <TwitterIcon
                className={classNames(projectcss.all, sty.svg___7VDm)}
                role={"img"}
              />

              <GithubIcon
                className={classNames(projectcss.all, sty.svg__mePXx)}
                role={"img"}
              />

              <YoutubeIcon
                className={classNames(projectcss.all, sty.svg__t4XC)}
                role={"img"}
              />

              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__g0AI
                )}
                component={Link}
                platform={"nextjs"}
              >
                {"Home"}
              </p.PlasmicLink>

              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link___62O9S
                )}
                component={Link}
                platform={"nextjs"}
              >
                {"About"}
              </p.PlasmicLink>

              <div
                data-plasmic-name={"pqxGlobal"}
                data-plasmic-override={overrides.pqxGlobal}
                className={classNames(projectcss.all, sty.pqxGlobal)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ozms
                  )}
                >
                  {"PQX GLOBAL"}
                </div>
              </div>

              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__zLyU
                )}
                component={Link}
                platform={"nextjs"}
              >
                {"Services"}
              </p.PlasmicLink>

              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__wsl7A
                )}
                component={Link}
                platform={"nextjs"}
              >
                {"Contact"}
              </p.PlasmicLink>

              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__xuY
                )}
                component={Link}
                platform={"nextjs"}
              >
                {"Search"}
              </p.PlasmicLink>
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"frame5"}
              data-plasmic-override={overrides.frame5}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame5)}
            >
              <div
                data-plasmic-name={"rectangle2"}
                data-plasmic-override={overrides.rectangle2}
                className={classNames(projectcss.all, sty.rectangle2)}
              />

              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__z9LGc)}>
                  <div
                    data-plasmic-name={"rectangle3"}
                    data-plasmic-override={overrides.rectangle3}
                    className={classNames(projectcss.all, sty.rectangle3)}
                  >
                    <div
                      data-plasmic-name={
                        "loremIpsumDolorSitAmetConsecteturAdipiscingElitAtTinciduntAdipiscingArcuVenenatisMassaEtiamMaurisSemAcInTempusPharetra"
                      }
                      data-plasmic-override={
                        overrides.loremIpsumDolorSitAmetConsecteturAdipiscingElitAtTinciduntAdipiscingArcuVenenatisMassaEtiamMaurisSemAcInTempusPharetra
                      }
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.loremIpsumDolorSitAmetConsecteturAdipiscingElitAtTinciduntAdipiscingArcuVenenatisMassaEtiamMaurisSemAcInTempusPharetra
                      )}
                    >
                      {
                        "Lorem ipsum dolor sit amet, consectetur adipiscing elit. At tincidunt adipiscing arcu venenatis massa etiam mauris. Sem ac in tempus pharetra.\n"
                      }
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mlxuh
                      )}
                    >
                      {"ABOUT ME"}
                    </div>

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"button"}
                      data-plasmic-override={overrides.button}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.button)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zbYPu
                        )}
                      >
                        {"LET’S CHAT"}
                      </div>
                    </p.Stack>
                  </div>
                </div>
              ) : null}
            </p.Stack>

            <div
              data-plasmic-name={"group1"}
              data-plasmic-override={overrides.group1}
              className={classNames(projectcss.all, sty.group1)}
            >
              <div
                data-plasmic-name={"rectangle5"}
                data-plasmic-override={overrides.rectangle5}
                className={classNames(projectcss.all, sty.rectangle5)}
              />

              <p.Stack
                as={"div"}
                data-plasmic-name={"frame9"}
                data-plasmic-override={overrides.frame9}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame9)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame6"}
                  data-plasmic-override={overrides.frame6}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame6)}
                >
                  <div
                    data-plasmic-name={"rectangle6"}
                    data-plasmic-override={overrides.rectangle6}
                    className={classNames(projectcss.all, sty.rectangle6)}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__juC9I
                    )}
                  >
                    {"SERVICE PACKAGE 1"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__tjn16
                    )}
                  >
                    {
                      "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Scelerisque tortor."
                    }
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hWi3G
                    )}
                  >
                    {"STARTING PRICE OF $100"}
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame7"}
                  data-plasmic-override={overrides.frame7}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame7)}
                >
                  <div
                    data-plasmic-name={"rectangle7"}
                    data-plasmic-override={overrides.rectangle7}
                    className={classNames(projectcss.all, sty.rectangle7)}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jmYVo
                    )}
                  >
                    {"SERVICE PACKAGE 2"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__yuEb2
                    )}
                  >
                    {
                      "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Scelerisque tortor."
                    }
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qemPf
                    )}
                  >
                    {"STARTING PRICE OF $150"}
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame8"}
                  data-plasmic-override={overrides.frame8}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame8)}
                >
                  <div
                    data-plasmic-name={"rectangle8"}
                    data-plasmic-override={overrides.rectangle8}
                    className={classNames(projectcss.all, sty.rectangle8)}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__sokdh
                    )}
                  >
                    {"SERVICE PACKAGE 3"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hlGlh
                    )}
                  >
                    {
                      "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Scelerisque tortor."
                    }
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___3MiU
                    )}
                  >
                    {"STARTING PRICE OF $200"}
                  </div>
                </p.Stack>
              </p.Stack>
            </div>

            <div
              data-plasmic-name={"group2"}
              data-plasmic-override={overrides.group2}
              className={classNames(projectcss.all, sty.group2)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"frame23"}
                data-plasmic-override={overrides.frame23}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame23)}
              >
                <div
                  data-plasmic-name={"rectangle9"}
                  data-plasmic-override={overrides.rectangle9}
                  className={classNames(projectcss.all, sty.rectangle9)}
                />
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"frame21"}
                data-plasmic-override={overrides.frame21}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame21)}
              >
                <div
                  data-plasmic-name={"rectangle14"}
                  data-plasmic-override={overrides.rectangle14}
                  className={classNames(projectcss.all, sty.rectangle14)}
                />
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"frame20"}
                data-plasmic-override={overrides.frame20}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame20)}
              >
                <div
                  data-plasmic-name={"rectangle10"}
                  data-plasmic-override={overrides.rectangle10}
                  className={classNames(projectcss.all, sty.rectangle10)}
                />
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"frame13"}
                data-plasmic-override={overrides.frame13}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame13)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame17"}
                  data-plasmic-override={overrides.frame17}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame17)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__aAxKb
                    )}
                  >
                    {"LET’S WORK TOGETHER"}
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame18"}
                  data-plasmic-override={overrides.frame18}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame18)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vmToA
                    )}
                  >
                    {
                      "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Scelerisque tortor."
                    }
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame19"}
                  data-plasmic-override={overrides.frame19}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame19)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"button3"}
                    data-plasmic-override={overrides.button3}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.button3)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mUPu3
                      )}
                    >
                      {"LET’S CHAT"}
                    </div>
                  </p.Stack>
                </p.Stack>
              </p.Stack>

              <div
                data-plasmic-name={"rectangle12"}
                data-plasmic-override={overrides.rectangle12}
                className={classNames(projectcss.all, sty.rectangle12)}
              />

              <p.Stack
                as={"div"}
                data-plasmic-name={"frame22"}
                data-plasmic-override={overrides.frame22}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame22)}
              >
                <div
                  data-plasmic-name={"rectangle13"}
                  data-plasmic-override={overrides.rectangle13}
                  className={classNames(projectcss.all, sty.rectangle13)}
                />
              </p.Stack>
            </div>

            <p.Stack
              as={"div"}
              data-plasmic-name={"frame14"}
              data-plasmic-override={overrides.frame14}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame14)}
            >
              <div
                data-plasmic-name={"rectangle15"}
                data-plasmic-override={overrides.rectangle15}
                className={classNames(projectcss.all, sty.rectangle15)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame2"}
                  data-plasmic-override={overrides.frame2}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame2)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox___5Ujxl)}
                  >
                    <Vector2Icon
                      className={classNames(projectcss.all, sty.svg__a4H3X)}
                      role={"img"}
                    />
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__tqUzf
                    )}
                  >
                    {
                      "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Justo amet, quis consequat elementum eget in pellentesque consequat in. Volutpat commodo ullamcorper a lorem. Nec cursus a egestas diam, non. Risus et commodo ut est, sed quis facilisi massa risus. Integer lorem sed morbi at orci, scelerisque et at. Accumsan felis diam risus ultricies adipiscing vitae."
                    }
                  </div>

                  <Vector2Icon
                    className={classNames(projectcss.all, sty.svg__yS45P)}
                    role={"img"}
                  />
                </p.Stack>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zbkg8
                  )}
                >
                  {"WHAT MY CLIENTS ARE SAYING"}
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__qnTdE)}>
                  {p.renderPlasmicSlot({
                    defaultContents: (
                      <React.Fragment>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__nj70J
                          )}
                        >
                          {"FOLLOW PQX GLOBAL @ "}
                        </div>

                        <p.PlasmicLink
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link__jqpHt
                          )}
                          component={Link}
                          platform={"nextjs"}
                        >
                          <p.PlasmicLink
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link__tEpEe
                            )}
                            component={Link}
                            platform={"nextjs"}
                          >
                            <TwitterIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__tJwem
                              )}
                              role={"img"}
                            />
                          </p.PlasmicLink>
                        </p.PlasmicLink>

                        <p.PlasmicLink
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link__gjXup
                          )}
                          component={Link}
                          platform={"nextjs"}
                        >
                          <GithubIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__fdw9Y
                            )}
                            role={"img"}
                          />
                        </p.PlasmicLink>

                        <p.PlasmicLink
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link___00CKx
                          )}
                          component={Link}
                          platform={"nextjs"}
                        >
                          <YoutubeIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__iSufD
                            )}
                            role={"img"}
                          />
                        </p.PlasmicLink>
                      </React.Fragment>
                    ),
                    value: args.followPqxGlobal,
                    className: classNames(sty.slotTargetFollowPqxGlobal)
                  })}
                </div>
              </div>
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"frame15"}
              data-plasmic-override={overrides.frame15}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame15)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"frame3"}
                data-plasmic-override={overrides.frame3}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame3)}
              >
                <div
                  data-plasmic-name={"rectangle4"}
                  data-plasmic-override={overrides.rectangle4}
                  className={classNames(projectcss.all, sty.rectangle4)}
                />

                <div
                  data-plasmic-name={"rectangle17"}
                  data-plasmic-override={overrides.rectangle17}
                  className={classNames(projectcss.all, sty.rectangle17)}
                />

                <div
                  data-plasmic-name={"rectangle18"}
                  data-plasmic-override={overrides.rectangle18}
                  className={classNames(projectcss.all, sty.rectangle18)}
                />

                <div
                  data-plasmic-name={"rectangle19"}
                  data-plasmic-override={overrides.rectangle19}
                  className={classNames(projectcss.all, sty.rectangle19)}
                />

                <div
                  data-plasmic-name={"rectangle20"}
                  data-plasmic-override={overrides.rectangle20}
                  className={classNames(projectcss.all, sty.rectangle20)}
                />
              </p.Stack>
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"frame11"}
              data-plasmic-override={overrides.frame11}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame11)}
            >
              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__zk20
                )}
                component={Link}
                platform={"nextjs"}
              >
                {"Home"}
              </p.PlasmicLink>

              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link___8Ih96
                )}
                component={Link}
                platform={"nextjs"}
              >
                {"About"}
              </p.PlasmicLink>

              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link___7Tdj5
                )}
                component={Link}
                platform={"nextjs"}
              >
                {"Services"}
              </p.PlasmicLink>

              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__t5Azs
                )}
                component={Link}
                platform={"nextjs"}
              >
                {"Contact"}
              </p.PlasmicLink>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vttbm
                )}
              >
                {"COPYRIGHT @ 2022 | PQX GLOBAL"}
              </div>
            </p.Stack>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  masterFrame: [
    "masterFrame",
    "homepage",
    "frame4",
    "pqxGlobal",
    "frame5",
    "rectangle2",
    "rectangle3",
    "loremIpsumDolorSitAmetConsecteturAdipiscingElitAtTinciduntAdipiscingArcuVenenatisMassaEtiamMaurisSemAcInTempusPharetra",
    "button",
    "group1",
    "rectangle5",
    "frame9",
    "frame6",
    "rectangle6",
    "frame7",
    "rectangle7",
    "frame8",
    "rectangle8",
    "group2",
    "frame23",
    "rectangle9",
    "frame21",
    "rectangle14",
    "frame20",
    "rectangle10",
    "frame13",
    "frame17",
    "frame18",
    "frame19",
    "button3",
    "rectangle12",
    "frame22",
    "rectangle13",
    "frame14",
    "rectangle15",
    "frame2",
    "frame15",
    "frame3",
    "rectangle4",
    "rectangle17",
    "rectangle18",
    "rectangle19",
    "rectangle20",
    "frame11"
  ],
  homepage: [
    "homepage",
    "frame4",
    "pqxGlobal",
    "frame5",
    "rectangle2",
    "rectangle3",
    "loremIpsumDolorSitAmetConsecteturAdipiscingElitAtTinciduntAdipiscingArcuVenenatisMassaEtiamMaurisSemAcInTempusPharetra",
    "button",
    "group1",
    "rectangle5",
    "frame9",
    "frame6",
    "rectangle6",
    "frame7",
    "rectangle7",
    "frame8",
    "rectangle8",
    "group2",
    "frame23",
    "rectangle9",
    "frame21",
    "rectangle14",
    "frame20",
    "rectangle10",
    "frame13",
    "frame17",
    "frame18",
    "frame19",
    "button3",
    "rectangle12",
    "frame22",
    "rectangle13",
    "frame14",
    "rectangle15",
    "frame2",
    "frame15",
    "frame3",
    "rectangle4",
    "rectangle17",
    "rectangle18",
    "rectangle19",
    "rectangle20",
    "frame11"
  ],
  frame4: ["frame4", "pqxGlobal"],
  pqxGlobal: ["pqxGlobal"],
  frame5: [
    "frame5",
    "rectangle2",
    "rectangle3",
    "loremIpsumDolorSitAmetConsecteturAdipiscingElitAtTinciduntAdipiscingArcuVenenatisMassaEtiamMaurisSemAcInTempusPharetra",
    "button"
  ],
  rectangle2: ["rectangle2"],
  rectangle3: [
    "rectangle3",
    "loremIpsumDolorSitAmetConsecteturAdipiscingElitAtTinciduntAdipiscingArcuVenenatisMassaEtiamMaurisSemAcInTempusPharetra",
    "button"
  ],
  loremIpsumDolorSitAmetConsecteturAdipiscingElitAtTinciduntAdipiscingArcuVenenatisMassaEtiamMaurisSemAcInTempusPharetra:
    [
      "loremIpsumDolorSitAmetConsecteturAdipiscingElitAtTinciduntAdipiscingArcuVenenatisMassaEtiamMaurisSemAcInTempusPharetra"
    ],
  button: ["button"],
  group1: [
    "group1",
    "rectangle5",
    "frame9",
    "frame6",
    "rectangle6",
    "frame7",
    "rectangle7",
    "frame8",
    "rectangle8"
  ],
  rectangle5: ["rectangle5"],
  frame9: [
    "frame9",
    "frame6",
    "rectangle6",
    "frame7",
    "rectangle7",
    "frame8",
    "rectangle8"
  ],
  frame6: ["frame6", "rectangle6"],
  rectangle6: ["rectangle6"],
  frame7: ["frame7", "rectangle7"],
  rectangle7: ["rectangle7"],
  frame8: ["frame8", "rectangle8"],
  rectangle8: ["rectangle8"],
  group2: [
    "group2",
    "frame23",
    "rectangle9",
    "frame21",
    "rectangle14",
    "frame20",
    "rectangle10",
    "frame13",
    "frame17",
    "frame18",
    "frame19",
    "button3",
    "rectangle12",
    "frame22",
    "rectangle13"
  ],
  frame23: ["frame23", "rectangle9"],
  rectangle9: ["rectangle9"],
  frame21: ["frame21", "rectangle14"],
  rectangle14: ["rectangle14"],
  frame20: ["frame20", "rectangle10"],
  rectangle10: ["rectangle10"],
  frame13: ["frame13", "frame17", "frame18", "frame19", "button3"],
  frame17: ["frame17"],
  frame18: ["frame18"],
  frame19: ["frame19", "button3"],
  button3: ["button3"],
  rectangle12: ["rectangle12"],
  frame22: ["frame22", "rectangle13"],
  rectangle13: ["rectangle13"],
  frame14: ["frame14", "rectangle15", "frame2"],
  rectangle15: ["rectangle15", "frame2"],
  frame2: ["frame2"],
  frame15: [
    "frame15",
    "frame3",
    "rectangle4",
    "rectangle17",
    "rectangle18",
    "rectangle19",
    "rectangle20"
  ],
  frame3: [
    "frame3",
    "rectangle4",
    "rectangle17",
    "rectangle18",
    "rectangle19",
    "rectangle20"
  ],
  rectangle4: ["rectangle4"],
  rectangle17: ["rectangle17"],
  rectangle18: ["rectangle18"],
  rectangle19: ["rectangle19"],
  rectangle20: ["rectangle20"],
  frame11: ["frame11"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  masterFrame: "div";
  homepage: "div";
  frame4: "div";
  pqxGlobal: "div";
  frame5: "div";
  rectangle2: "div";
  rectangle3: "div";
  loremIpsumDolorSitAmetConsecteturAdipiscingElitAtTinciduntAdipiscingArcuVenenatisMassaEtiamMaurisSemAcInTempusPharetra: "div";
  button: "div";
  group1: "div";
  rectangle5: "div";
  frame9: "div";
  frame6: "div";
  rectangle6: "div";
  frame7: "div";
  rectangle7: "div";
  frame8: "div";
  rectangle8: "div";
  group2: "div";
  frame23: "div";
  rectangle9: "div";
  frame21: "div";
  rectangle14: "div";
  frame20: "div";
  rectangle10: "div";
  frame13: "div";
  frame17: "div";
  frame18: "div";
  frame19: "div";
  button3: "div";
  rectangle12: "div";
  frame22: "div";
  rectangle13: "div";
  frame14: "div";
  rectangle15: "div";
  frame2: "div";
  frame15: "div";
  frame3: "div";
  rectangle4: "div";
  rectangle17: "div";
  rectangle18: "div";
  rectangle19: "div";
  rectangle20: "div";
  frame11: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "masterFrame") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("masterFrame"),
  {
    // Helper components rendering sub-elements
    homepage: makeNodeComponent("homepage"),
    frame4: makeNodeComponent("frame4"),
    pqxGlobal: makeNodeComponent("pqxGlobal"),
    frame5: makeNodeComponent("frame5"),
    rectangle2: makeNodeComponent("rectangle2"),
    rectangle3: makeNodeComponent("rectangle3"),
    loremIpsumDolorSitAmetConsecteturAdipiscingElitAtTinciduntAdipiscingArcuVenenatisMassaEtiamMaurisSemAcInTempusPharetra:
      makeNodeComponent(
        "loremIpsumDolorSitAmetConsecteturAdipiscingElitAtTinciduntAdipiscingArcuVenenatisMassaEtiamMaurisSemAcInTempusPharetra"
      ),
    button: makeNodeComponent("button"),
    group1: makeNodeComponent("group1"),
    rectangle5: makeNodeComponent("rectangle5"),
    frame9: makeNodeComponent("frame9"),
    frame6: makeNodeComponent("frame6"),
    rectangle6: makeNodeComponent("rectangle6"),
    frame7: makeNodeComponent("frame7"),
    rectangle7: makeNodeComponent("rectangle7"),
    frame8: makeNodeComponent("frame8"),
    rectangle8: makeNodeComponent("rectangle8"),
    group2: makeNodeComponent("group2"),
    frame23: makeNodeComponent("frame23"),
    rectangle9: makeNodeComponent("rectangle9"),
    frame21: makeNodeComponent("frame21"),
    rectangle14: makeNodeComponent("rectangle14"),
    frame20: makeNodeComponent("frame20"),
    rectangle10: makeNodeComponent("rectangle10"),
    frame13: makeNodeComponent("frame13"),
    frame17: makeNodeComponent("frame17"),
    frame18: makeNodeComponent("frame18"),
    frame19: makeNodeComponent("frame19"),
    button3: makeNodeComponent("button3"),
    rectangle12: makeNodeComponent("rectangle12"),
    frame22: makeNodeComponent("frame22"),
    rectangle13: makeNodeComponent("rectangle13"),
    frame14: makeNodeComponent("frame14"),
    rectangle15: makeNodeComponent("rectangle15"),
    frame2: makeNodeComponent("frame2"),
    frame15: makeNodeComponent("frame15"),
    frame3: makeNodeComponent("frame3"),
    rectangle4: makeNodeComponent("rectangle4"),
    rectangle17: makeNodeComponent("rectangle17"),
    rectangle18: makeNodeComponent("rectangle18"),
    rectangle19: makeNodeComponent("rectangle19"),
    rectangle20: makeNodeComponent("rectangle20"),
    frame11: makeNodeComponent("frame11"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
